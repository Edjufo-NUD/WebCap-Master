import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FaUser, FaCog, FaFileAlt, FaSignOutAlt, FaUpload, FaTrashAlt, FaSortAlphaDown, FaSortAlphaUp } from "react-icons/fa";
import { supabase } from './supabaseClient';
import './Dances.css';
import flipinoLogo from './assets/Pics/IndakHamakaLogo.png';


const Dances = () => {
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [showLogoutPopup, setShowLogoutPopup] = useState(false);
  
  const [username, setUsername] = useState('');
  const [loading, setLoading] = useState(true);
  
  const [dances, setDances] = useState([]);
  const [filteredDances, setFilteredDances] = useState([]);
  const [selectedIsland, setSelectedIsland] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [notification, setNotification] = useState({ message: '', type: '' });
  const [deleteDanceId, setDeleteDanceId] = useState(null); // Add this state
  const [sortOrder, setSortOrder] = useState('asc'); // Add this state

  const navigate = useNavigate();
  const handleNavigation = (path) => {
    navigate(path);
    setIsDrawerOpen(false);
  };

  useEffect(() => {
    document.body.classList.add('dances');
    return () => {
      document.body.classList.remove('dances');
    };
  }, []);

  
  

  useEffect(() => {
    const fetchUsername = async () => {
      try {
        const token = localStorage.getItem("access_token");
        if (!token) return;

        const { data: userData, error: userError } = await supabase.auth.getUser(token);
        if (userError || !userData?.user) {
          console.error("Error fetching user:", userError);
          return;
        }

        const { data: userProfile, error: profileError } = await supabase
          .from("users")
          .select("username")
          .eq("email", userData.user.email)
          .single();

        if (profileError || !userProfile) {
          console.error("Error fetching username:", profileError);
          return;
        }

        setUsername(userProfile.username);
      } catch (error) {
        console.error("Unexpected error:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchUsername();
  }, []);

  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (!token) {
      navigate("/login");
    }
  }, [navigate]);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest('.drawer') && !event.target.closest('.settings-icon')) {
        setIsDrawerOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Fetch dances with uploader info
  useEffect(() => {
    const fetchDancesAndUsers = async () => {
      // 1. Fetch dances
      const { data: dancesData, error: dancesError } = await supabase
        .from('dances')
        .select('id, title, island, user_id')
        .order('created_at', { ascending: false });

      // 2. Fetch users
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select('id, username');

      // 3. Fetch dance_images (first image per dance)
      const { data: imagesData, error: imagesError } = await supabase
        .from('dance_images')
        .select('dance_id, image_url, position')
        .order('position', { ascending: true });

      if (!dancesError && !usersError && !imagesError) {
        // Map user IDs to usernames
        const userMap = {};
        usersData.forEach(u => { userMap[u.id] = u.username; });

        // Map dance_id to its first image
        const imageMap = {};
        imagesData.forEach(img => {
          if (!imageMap[img.dance_id]) {
            imageMap[img.dance_id] = img.image_url;
          }
        });

        // Merge username and image into dances
        const merged = (dancesData || []).map(d => ({
          ...d,
          username: userMap[d.user_id] || "Unknown",
          image_url: imageMap[d.id] || null
        }));
        setDances(merged);
      }
    };
    fetchDancesAndUsers();
  }, []);

  // Filtering and sorting logic
  useEffect(() => {
    let filtered = dances;
    if (selectedIsland) {
      filtered = filtered.filter(d => d.island === selectedIsland);
    }
    if (searchTerm) {
      filtered = filtered.filter(d =>
        d.title.toLowerCase().startsWith(searchTerm.toLowerCase())
      );
    }
    // Sort alphabetically
    filtered = [...filtered].sort((a, b) => {
      if (sortOrder === 'asc') {
        return a.title.localeCompare(b.title);
      } else {
        return b.title.localeCompare(a.title);
      }
    });
    setFilteredDances(filtered);
  }, [dances, selectedIsland, searchTerm, sortOrder]);

  const showNotification = (message, type = 'error') => {
    setNotification({ message, type });
    setTimeout(() => setNotification({ message: '', type: '' }), 3000);
  };

  const handleLogout = () => {
    setShowLogoutPopup(true);
  };

  const confirmLogout = () => {
    setShowLogoutPopup(false);
    localStorage.removeItem('access_token');
    localStorage.removeItem('auth_user_id');
    navigate('/login');
  };

  const cancelLogout = () => setShowLogoutPopup(false);


  const handleDeleteDance = (danceId) => {
    setDeleteDanceId(danceId); // Open modal for this dance
  };

  const confirmDeleteDance = async () => {
    if (!deleteDanceId) return;
    try {
      await supabase.from('dance_figures').delete().eq('dance_id', deleteDanceId);
      await supabase.from('dance_images').delete().eq('dance_id', deleteDanceId);
      await supabase.from('dances').delete().eq('id', deleteDanceId);
      setDances(dances.filter(d => d.id !== deleteDanceId));
      setNotification({ message: 'Dance deleted successfully!', type: 'success' });
    } catch (error) {
      setNotification({ message: 'Failed to delete dance.', type: 'error' });
    } finally {
      setDeleteDanceId(null);
    }
  };

  const cancelDeleteDance = () => setDeleteDanceId(null);

  return (
    <div>
      {/* Navbar */}
      <nav className="navbar">
          <div className="logo-container">
            <img src={flipinoLogo} alt="FLIPino Logo" className="logo" />
            <span className="navbar-title">FLIPino</span>
          </div>
          <ul className="navbar-list">
            <li className="navbar-item"><Link to="/home">Home</Link></li>
            <li className="navbar-item"><Link to="/Dashboard">Dashboard</Link></li>
            <li className="navbar-item"><Link to="/dances">Dances</Link></li>
            <li className="navbar-item"><Link to="/about">About</Link></li>
          </ul>
          <div className="user-section">
            <button className="user-button" onClick={() => handleNavigation('/account')}>
              <FaUser className="icon user-icon" />
              <span className="user-text" style={{ width: '100px', textAlign: 'center' }}>
                {loading ? "Loading..." : username || "User"}
              </span>
            </button>
            <FaCog className="icon settings-icon" onClick={() => setIsDrawerOpen(true)} />
          </div>
        </nav>

      {/* Drawer */}
      <div className={`dances-drawer drawer ${isDrawerOpen ? 'open' : ''}`}>
        <div className="drawer-content">
          <h2>Settings</h2>
          <ul>
            <li>
              <FaUser className="drawer-icon" />
              <Link to="/account" onClick={() => setIsDrawerOpen(false)}>Account</Link>
            </li>
            <li>
  <FaFileAlt className="drawer-icon" />
  <Link to="/log-reports" onClick={() => setIsDrawerOpen(false)}>User Ratings</Link>
</li>

            <li>
              <FaSignOutAlt className="drawer-icon" />
              <span className="drawer-logout" onClick={handleLogout}>Logout</span>
            </li>
          </ul>
        </div>
      </div>

      <div className="dances-dance-list">
        {/* Buttons Section */}
        <div
  className="dances-buttons-container"
  style={{
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    flexWrap: 'nowrap',
    width: '100%',
    padding: '10px 20px',
    gap: '20px'
  }}
>
  {/* Left-side buttons */}
  <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
    <button className={`rectangle-button${selectedIsland === '' ? ' active' : ''}`} onClick={() => setSelectedIsland('')}>All</button>
    <button className={`rectangle-button${selectedIsland === 'Luzon' ? ' active' : ''}`} onClick={() => setSelectedIsland(selectedIsland === 'Luzon' ? '' : 'Luzon')}>Luzon</button>
    <button className={`rectangle-button${selectedIsland === 'Visayas' ? ' active' : ''}`} onClick={() => setSelectedIsland(selectedIsland === 'Visayas' ? '' : 'Visayas')}>Visayas</button>
    <button className={`rectangle-button${selectedIsland === 'Mindanao' ? ' active' : ''}`} onClick={() => setSelectedIsland(selectedIsland === 'Mindanao' ? '' : 'Mindanao')}>Mindanao</button>
    <button className="icon-sort-btn" onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')} title={`Sort ${sortOrder === 'asc' ? 'Z-A' : 'A-Z'}`}>
      {sortOrder === 'asc' ? <FaSortAlphaDown /> : <FaSortAlphaUp />}
    </button>
  </div>

  <input
  type="text"
  className="dance-search-input"
  placeholder="Search dance..."
  value={searchTerm}
  onChange={(e) => setSearchTerm(e.target.value)}
  style={{
    marginTop: '30px',              // Moves it a little downward
    width: '700px',                // Wider search bar
    height: '50px',
    borderRadius: '6px',
    padding: '0 16px',
    fontSize: '16px',
    border: '1px solid #ccc',
    boxShadow: '0 1px 4px rgba(0,0,0,0.1)'
  }}
/>

  {/* Right-side Upload button */}
  <div
    className="upload-container"
    onClick={() => navigate('/upload-dance')}
    style={{ cursor: 'pointer', whiteSpace: 'nowrap' }}
  >
    <FaUpload className="upload-icon" />
    <span className="upload-text">Upload Video</span>
  </div>
</div>


        <div className="dances-dance-list">
          {[...filteredDances].reverse().map(dance => (
            <div
              key={dance.id}
              className="dance-card"
              style={{ position: 'relative', cursor: 'pointer', borderRadius: '5px'}}
              onClick={() => navigate(`/MainDance/${dance.id}`)}
            >
              {/* Delete Icon at Top Right */}

              {dance.image_url ? (
                <img
                  src={dance.image_url}
                  alt={dance.title}
                  style={{
                    width: 150,      // Increased width
                    height: 125,     // Increased height
                    borderRadius: "8px",
                    objectFit: "cover",
                    display: "block",
                    margin: "16px auto 8px auto",
                    border: "2px solid #eee"
                  }}
                />
              ) : (
                <div className="letter-circle">
                  {dance.title ? dance.title.charAt(0).toUpperCase() : "?"}
                </div>
              )}
              <h3
                className="dance-name"
                style={{
                  background: 'white',
                  color: 'black',
                  padding: '8px 16px',
                  borderRadius: '0px',
                  display: 'inline-block',
                  margin: '4px 0 2px 0'
                }}
              >
                {dance.title}
              </h3>
              <div style={{ display: "flex", justifyContent: "center", gap: 8 }}>
                <span className="instructor-name">{dance.island}</span>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Custom Delete Confirmation Modal */}
      {deleteDanceId && (
        <div className="custom-modal-overlay">
          <div className="custom-modal">
            <h3>Delete Dance</h3>
            <p>Are you sure you want to delete this dance and all its contents?</p>
            <div className="modal-buttons">
              <button className="modal-confirm-btn" onClick={confirmDeleteDance}>Delete</button>
              <button className="modal-cancel-btn" onClick={cancelDeleteDance}>Cancel</button>
            </div>
          </div>
        </div>
      )}

      {/* Notification Toast */}
      {notification.message && (
        <div className={`custom-toast ${notification.type}`}>
          {notification.type === 'loading' ? (
            <span>
              <span className="spinner" style={{
                display: 'inline-block',
                width: 18,
                height: 18,
                border: '2px solid #ccc',
                borderTop: '2px solid #333',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                marginRight: 8,
                verticalAlign: 'middle'
              }} />
              {notification.message}
            </span>
          ) : (
            notification.message
          )}
        </div>
      )}

      {/* Logout Confirmation Popup */}
      {showLogoutPopup && (
        <div className="logout-popup-overlay">
          <div className="logout-popup">
            <h3>Confirm Logout</h3>
            <p>Are you sure you want to log out?</p>
            <div className="modal-buttons">
              <button onClick={confirmLogout}>Yes</button>
              <button onClick={cancelLogout}>Cancel</button>
            </div>
          </div>
        </div>
      )}

      
    </div>
  );
};

export default Dances;