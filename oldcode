import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "./supabaseClient";
import "./Register.css";

const Snackbar = ({ message, type, onClose }) => {
  return (
    <div
      className={`snackbar ${type}`}
      onClick={onClose}
      role="alert"
      aria-live="assertive"
    >
      {message}
    </div>
  );
};

const Register = () => {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [snackbar, setSnackbar] = useState({ message: "", type: "" });
  const navigate = useNavigate();

  const showSnackbar = (message, type) => {
    setSnackbar({ message, type });
    setTimeout(() => {
      setSnackbar({ message: "", type: "" });
    }, 3000);
  };

  const validatePassword = (password) => password.length >= 8;

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (username.length < 6) {
      showSnackbar("Username must be at least 6 characters!", "error");
      return;
    }

    if (!validatePassword(password)) {
      showSnackbar("Password must be at least 8 characters.", "error");
      return;
    }

    if (password !== confirmPassword) {
      showSnackbar("Passwords do not match!", "error");
      return;
    }

    try {
      // Step 1: Check if username or email already exists
      const { data: existingUser, error: checkError } = await supabase
        .from("users")
        .select("id")
        .or(`username.eq.${username},email.eq.${email}`)
        .maybeSingle();

      if (checkError) throw checkError;

      if (existingUser) {
        showSnackbar("Username or email already exists!", "error");
        return;
      }

      // Step 2: Sign up with Supabase Auth
      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: { display_name: username },
        },
      });

      if (signUpError || !signUpData.user) {
        showSnackbar(`Auth error: ${signUpError?.message || "Signup failed"}`, "error");
        return;
      }

      // Step 3: Get authenticated user
      const {
        data: { user },
        error: userFetchError,
      } = await supabase.auth.getUser();

      if (userFetchError || !user) {
        showSnackbar(`Error retrieving user info: ${userFetchError?.message}`, "error");
        return;
      }

      // Step 4: Update username in users table
      const { error: updateError } = await supabase
        .from("users")
        .update({ username })
        .eq("id", user.id);

      if (updateError) {
        showSnackbar(`Error updating username: ${updateError.message}`, "error");
        return;
      }

      showSnackbar("Registration successful! Redirecting...", "success");
      setTimeout(() => navigate("/login"), 3000);
    } catch (err) {
      console.error("Registration error:", err.message);
      showSnackbar(`Unexpected error: ${err.message}`, "error");
    }
  };

  return (
    <div className="register-container">
      <div className="register-box">
        <h1 className="register-title">Hello!</h1>
        <p className="register-subtitle">Letâ€™s Register Your Account</p>

        <form onSubmit={handleSubmit}>
          <label className="register-label">Username</label>
          <input
            type="text"
            placeholder="Enter your username"
            className="register-input"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            required
          />

          <label className="register-label">Email</label>
          <input
            type="email"
            placeholder="Enter your email"
            className="register-input"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <label className="register-label">Password</label>
          <input
            type="password"
            placeholder="Enter your password"
            className="register-input"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />

          <label className="register-label">Confirm Password</label>
          <input
            type="password"
            placeholder="Confirm your password"
            className="register-input"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />

          <button type="submit" className="register-button">
            Register
          </button>
        </form>

        <p className="register-footer">
          Already have an account?{" "}
          <span onClick={() => navigate("/login")} className="link">
            Login now
          </span>
        </p>
      </div>

      {snackbar.message && (
        <Snackbar
          message={snackbar.message}
          type={snackbar.type}
          onClose={() => setSnackbar({ message: "", type: "" })}
        />
      )}
    </div>
  );
};

export default Register;
